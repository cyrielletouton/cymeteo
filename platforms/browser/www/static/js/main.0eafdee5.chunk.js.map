{"version":3,"sources":["componentDate.js","CustomNavBar.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["DateActuelle","today","Date","dateajd","getDate","getMonth","getFullYear","state","date","className","this","React","Component","CustomNavBar","props","useState","collapsed","setCollapsed","Navbar","color","light","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Footer","ReactDOM","render","document","getElementById","App","getLatitude","getLongitude","myHTML","myHTML2","myHTML3","myHTML4","myHTML5","myHTMLnom","callApi","event","urlAPI","city","preventDefault","currentTarget","getAttribute","value","fetch","then","resultatJSON","json","myJson","cod","console","log","donnees_meteo","list","name","weather","icon","description","Math","round","main","temp","temp_max","temp_min","humidity","innerHTML","message","catch","error","navigator","geolocation","watchPosition","position","coords","latitude","longitude","alert","code","enableHighAccuracy","timeout","id","dangerouslySetInnerHTML","__html","Container","Row","Col","Input","type","placeholder","urlAPI2","resultatJSON2","myJson2","previsions","previsions24","previsions48","previsions72","previsions96","Boolean","window","location","hostname","match","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0eafdee5.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass DateActuelle extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        var today = new Date(),\r\n            dateajd = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\r\n\r\n        this.state = {\r\n            date : dateajd\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='datedujour'>\r\n                {this.state.date}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateActuelle;","import React, { useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n  } from 'reactstrap';\r\n\r\n  const CustomNavBar = (props) => {\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const toggleNavbar = () => setCollapsed(!collapsed);\r\n    return (\r\n        <div>\r\n            <Navbar color=\"faded\" light>\r\n                <NavbarBrand href=\"/\" className=\"mr-auto\">CyMétéo <i className=\"fas fa-binoculars\"></i></NavbarBrand>\r\n                <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                <Collapse isOpen={!collapsed} navbar>\r\n                <Nav navbar>\r\n                    <NavItem>\r\n                    <NavLink href=\"/\">Mes villes</ NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                    <NavLink href=\"/\">Actualités</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                    <NavLink href=\"/\">Mer</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                    <NavLink href=\"/\">Montagne</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n  }\r\n\r\nexport default CustomNavBar;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>&copy; - 2020 - Cyrielle <i className=\"far fa-smile-wink\"></i></p>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { useState} from 'react';\nimport './App.css';\nimport WeatherIcon from 'react-icons-weather';\nimport { Button, Input } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport {\n  Collapse,\n  toggleNavbar,\n  collapsed,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\nimport ReactDOM from 'react-dom';\nimport DateActuelle from './componentDate.js';\nimport CustomNavBar from './CustomNavBar';\nimport Footer from './Footer';\n\nReactDOM.render(<DateActuelle />, document.getElementById('root'));\nReactDOM.render(<Footer />, document.getElementById('root'));\n\n\nfunction App() {\n\n    let getLatitude;\n    let getLongitude;\n    let myHTML;\n    let myHTML2;\n    let myHTML3;\n    let myHTML4;\n    let myHTML5;\n    let myHTMLnom;\n    \n    // Permet de récupérer la localisation\n    navigator.geolocation.watchPosition(showLatLng, onError, {enableHighAccuracy: true, timeout: 30000}) ;\n\n    function showLatLng(position){\n        getLatitude = position.coords.latitude;\n        getLongitude = position.coords.longitude;\n    } ;\n\n    function onError(error){\n      alert('code:' + error.code + '\\n' +\n            'message:' + error.message + '\\n') ;\n    } ;\n\n    // <CallApi />\n\n    function callApi(event) {\n\n        let urlAPI ;\n        let city;\n\n        // Je bloque l'action par défaut du formulaire pour éviter qu'il recherge ma page et passe dans mon script actuel.\n        event.preventDefault() ;\n\n        // Si click sur le bouton de recherche, alors je reprends la valeur du champs city\n        if(event.currentTarget.getAttribute('name') == 'search') {\n            city = document.getElementById('city').value;\n        } else { // Sinon je défini la variable city a vide\n            city = '' ;\n        }\n\n        // Je m'assure qu'on ait saisi la ville\n        if(city !== ''){\n            // Je défini une variable qui contient l'url de mon API avec les différents paramètres GET\n            // Les paramètres get se trouvent après le ? et son séparés par des &.\n            // Ils fonctionnent comme un tableau (array). clé=valeur\n        urlAPI = \"https://api.openweathermap.org/data/2.5/find?appid=eeaf8a7283f472ef951921252c999f79&units=metric&lang=fr&q=\"+city;\n}\n\n/*\n        q = Toulouse\n        appid = clé api\n        units = metric\n        lang = fr\n*/\n\n        else if (getLatitude !== '' && getLongitude !==''){\n            urlAPI = \"https://api.openweathermap.org/data/2.5/find?appid=eeaf8a7283f472ef951921252c999f79&units=metric&lang=fr&lat=\"+getLatitude +\"&lon=\" +getLongitude;\n          }\n\n        // La variable urlAPI est bien complétée (avec une url geoloc ou ville)\n        // Je lance mon appel à l'API météo\n        if (urlAPI !==''){\n            // Appel de l'url (vous mettez l'url dans votre navigateur)\n            \n        // Appel de l'url (vous mettez l'url de votre navigateur)\n        fetch(urlAPI)\n        .then(function(resultatJSON){ // Donc je récupère les résultats\n\n            //Je retourne ces résultats à la fonction \"then()\" suivante en lui indiquant que c'est un Json\n            // Les résultats sont tous à l'intérieur de la variable \"resultatJSON\"\n            // Cette variable est définie dans le \"function(resultatJSON)\" ci-dessus.\n\n            // Et pour lui dire que c'est un json, j'utilise la ligne ci-dessous.\n            return resultatJSON.json();\n        })\n        .then(function(myJson){\n            if(myJson.cod == 200){\n\n                console.log(myJson); // Toutes les infos de mon flux\n                \n                let donnees_meteo = myJson.list[0];\n\n                myHTML = '<h1>'+donnees_meteo.name +'<h1>';\n                myHTML += '<h2> <img src=\"icons/' +donnees_meteo.weather[0].icon +'.png\" id=\"iconsmeteo\" alt=\"icon meteo\"></h2>' ;\n                //<img src=\"icons/01d.png\" />\n                myHTML  += '<h2>' +donnees_meteo.weather[0].description +'. '  +Math.round(donnees_meteo.main.temp) + ' °C</h2>' ;\n                myHTML += '<h2 className=\"maxtemp\"> Max <i class=\"fas fa-temperature-high\"></i> : ' +Math.round(donnees_meteo.main.temp_max) +' °C</h2>' ;\n                myHTML += '<h2 class=\"mintemp\"> Min <i class=\"fas fa-temperature-low\"></i> : ' +Math.round(donnees_meteo.main.temp_min) +' °C</h2>' ;\n                myHTML += '<h2> Humidité <i class=\"fas fa-tint\"></i> : ' +donnees_meteo.main.humidity +'% </h2>' ;\n                \n                document.getElementById('meteo').innerHTML = myHTML  ;\n\n            } else if (myJson.cod == 401){\n                console.log(myJson.message);\n            }\n        })\n        .catch(function(error){\n            console.log(error);\n            console.log('Erreur de communication avec l\\'API') ;\n        }) ;\n        } else {\n          console.log('Vous devez saisir une ville ou vous géolocaliser') ;\n        }\n\n    } // Fin function callApi\n\n    function callApi2(event) {\n\n      let city;\n      let urlAPI2;\n\n      event.preventDefault() ;\n\n      if(event.currentTarget.getAttribute('name') == 'previsionnn') {\n          city = document.getElementById('city').value;\n      } else { \n          city = '' ;\n      }\n\n      if(city !== ''){\n      urlAPI2 = \"https://api.openweathermap.org/data/2.5/forecast?&appid=eeaf8a7283f472ef951921252c999f79&units=metric&lang=fr&q=\"+city ;\n      }\n\n      else if (getLatitude !== '' && getLongitude !==''){\n          urlAPI2 = \"https://api.openweathermap.org/data/2.5/forecast?&appid=eeaf8a7283f472ef951921252c999f79&units=metric&lang=fr&lat=\"+getLatitude +\"&lon=\" +getLongitude;\n      }\n\n      if (urlAPI2 !==''){\n        \n      fetch(urlAPI2)\n      .then(function(resultatJSON2){ // Donc je récupère les résultats\n\n          //Je retourne ces résultats à la fonction \"then()\" suivante en lui indiquant que c'est un Json\n          // Les résultats sont tous à l'intérieur de la variable \"resultatJSON\"\n          // Cette variable est définie dans le \"function(resultatJSON)\" ci-dessus.\n\n          // Et pour lui dire que c'est un json, j'utilise la ligne ci-dessous.\n          return resultatJSON2.json();\n      })\n      .then(function(myJson2){\n          if(myJson2.cod == 200){\n\n              console.log(myJson2);\n              \n              let previsions = myJson2.city ;\n\n              myHTMLnom = '<h1> '+previsions.name + '</h1>' ;\n              document.getElementById('previsionsnom').innerHTML = myHTMLnom  ;\n\n              let previsions24 = myJson2.list[6];\n\n              myHTML2 = '<h2> Demain : <h2>';\n              myHTML2 += '<h2> <img src=\"icons/' +previsions24.weather[0].icon +'.png\" className=\"iconsmeteoprevisions\" alt=\"icon meteo\"></h2>' ;\n              myHTML2  += '<h2>' +previsions24.weather[0].description +'</h2>' ;\n              myHTML2 += '<h2>' +Math.round(previsions24.main.temp) + ' °C </h2>';\n              document.getElementById('previsionsa24').innerHTML = myHTML2  ;\n\n              let previsions48 = myJson2.list[12];\n\n              myHTML3 = '<h2> Après-demain : <h2>';\n              myHTML3 += '<h2> <img src=\"icons/' +previsions48.weather[0].icon +'.png\" className=\"iconsmeteoprevisions\" alt=\"icon meteo\"></h2>' ;\n              myHTML3  += '<h2>' +previsions48.weather[0].description +'</h2>' ;\n              myHTML3 += '<h2>' +Math.round(previsions48.main.temp) + ' °C </h2>';\n              document.getElementById('previsionsa48').innerHTML = myHTML3  ;\n\n              let previsions72 = myJson2.list[18];\n\n              myHTML4 = '<h2> Dans 3 jours : <h2>';\n              myHTML4 += '<h2> <img src=\"icons/' +previsions72.weather[0].icon +'.png\" className=\"iconsmeteoprevisions\" alt=\"icon meteo\"></h2>' ;\n              myHTML4  += '<h2>' +previsions72.weather[0].description +'</h2>' ;\n              myHTML4 += '<h2>' +Math.round(previsions72.main.temp) + ' °C </h2>';\n              document.getElementById('previsionsa72').innerHTML = myHTML4  ;\n\n              let previsions96 = myJson2.list[24];\n\n              myHTML5 = '<h2> Dans 4 jours :<h2>';\n              myHTML5 += '<h2> <img src=\"icons/' +previsions96.weather[0].icon +'.png\" className=\"iconsmeteoprevisions\" alt=\"icon meteo\"></h2>' ;\n              myHTML5  += '<h2>' +previsions96.weather[0].description +'</h2>' ;\n              myHTML5 += '<h2>' +Math.round(previsions96.main.temp) + ' °C </h2>';\n              document.getElementById('previsionsa96').innerHTML = myHTML5  ;\n\n          } else if (myJson2.cod == 401){\n              console.log(myJson2.message);\n          }\n      })\n      .catch(function(error){\n          console.log(error);\n          console.log('Erreur de communication avec l\\'API') ;\n      }) ;\n      } else {\n        console.log('Vous devez saisir une ville ou vous géolocaliser') ;\n      }\n\n    } // Fin function callApi2\n\n\n  // Rendu HTML (dans return) (fait en JSX):\n  return (\n    <div className=\"App\">\n\n      <CustomNavBar />\n\n      <header>\n        <div>\n          <h1>METEO</h1>\n          <DateActuelle id=\"dateactuelle\"/>\n          <div id='meteo' dangerouslySetInnerHTML={{ __html: myHTML}}>\n          </div>\n          <div id='geoloc'> </div>\n        </div>\n      </header>\n\n      <Container>\n        <Row className=\"ville\">\n          <Col className=\"recherche\">\n            <form>\n              <Input type=\"text\" name=\"city\" id=\"city\" placeholder=\"Recherche ville...\"></Input>\n              <button name=\"search\" type=\"submit\" id=\"search\" onClick={callApi}> <i className=\"fas fa-search\"></i> </button>\n            </form>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <form>\n                <button name=\"geoloc\" id=\"btnGeoloc\" type=\"button\" onClick={callApi}>Me géolocaliser <i className=\"fas fa-map-marker-alt\"></i></button>\n              </form>\n          </Col>\n        </Row>\n\n        <Row id=\"separator\"></Row>\n\n        <p id=\"prochain\"> Quel temps dans les prochains jours ?</p>\n\n        <form>\n            <button name=\"previsionnn\" id=\"previsionnn\" type=\"button\" onClick={callApi2}>Les prévisions</button>\n        </form>\n\n      </Container>\n\n      <section id=\"sectionprevisions\">\n        <div id='previsionsnom' dangerouslySetInnerHTML={{ __html: myHTMLnom}}></div>\n          <div id=\"resultatsprevisions\">\n            <div id='previsionsa24' dangerouslySetInnerHTML={{ __html: myHTML2}}></div>\n            <div id='previsionsa48' dangerouslySetInnerHTML={{ __html: myHTML3}}></div>\n            <div id='previsionsa72' dangerouslySetInnerHTML={{ __html: myHTML4}}></div>\n            <div id='previsionsa96' dangerouslySetInnerHTML={{ __html: myHTML5}}></div>\n          </div>\n      </section>\n\n      <Footer />\n\n    </div> // Fin div className App\n\n  ); // Fin return\n\n\n} // Fin function App\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}